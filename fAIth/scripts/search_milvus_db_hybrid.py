from pathlib import Path
import sys
import os
from pymilvus import MilvusClient, CollectionSchema, FieldSchema, DataType, Function, FunctionType, AnnSearchRequest, WeightedRanker, RRFRanker
from dotenv import load_dotenv
import json

# Load environment variables
load_dotenv()

MILVUS_URL = os.getenv("MILVUS_URL")
MILVUS_DATABASE_NAME = os.getenv("MILVUS_DATABASE_NAME")
MILVUS_USERNAME = os.getenv("MILVUS_USERNAME")
MILVUS_PASSWORD = os.getenv("MILVUS_PASSWORD")

# Make sure we can import the Django project without initializing apps
REPO_ROOT = Path(__file__).resolve().parent.parent
if str(REPO_ROOT) not in sys.path:
    sys.path.insert(0, str(REPO_ROOT))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "fAIth.settings")
from frontend.globals import BIBLE_DATA_ROOT, VERSION_SELECTION, IN_ORDER_BOOKS, CHAPTER_SELECTION
from ai.globals import EMBEDDING_ENGINE

collection_name = "bsb"
limit = 10

# Establish a connection to the Milvus database
client = MilvusClient(uri=MILVUS_URL,
                      token=f"{MILVUS_USERNAME}:{MILVUS_PASSWORD}")

if MILVUS_DATABASE_NAME in client.list_databases():
    client.use_database(MILVUS_DATABASE_NAME)
else:
    print(f"Database {MILVUS_DATABASE_NAME} not found")
    exit(1)

if collection_name in client.list_collections():
    client.load_collection(collection_name=collection_name)
else:
    print(f"Collection {collection_name} not found")
    exit(1)

# Get query embedding
queries = ["In the beginning", "Sodom and Gomorrah", "Garden of Eden", "Tower of Babel", "Adam and Eve", "What was the name of the first man?", "Noah's Arc", "Noah's Ark"]
query_embeddings = EMBEDDING_ENGINE.embed(queries, prompt_type="query", normalize=False)
for query, query_embedding in zip(queries, query_embeddings):
    # Set up BM25 search request on sparse field generated by BM25 function
    sparse_search_params = {"metric_type": "BM25", "params": {"drop_ratio_search": 0.2}}
    sparse_request = AnnSearchRequest(
        [query], "sparse_embedding", sparse_search_params, limit=limit
    )

    # Set up dense vector search request on your dense field
    dense_search_params = {"metric_type": "COSINE", "params": {"ef": 128}}
    dense_request = AnnSearchRequest(
        [query_embedding], "dense_embedding", dense_search_params, limit=limit
    )

    # BM25 sparse vectors
    sparse_results = client.search(
        collection_name=collection_name,
        data=[query],
        anns_field="sparse_embedding",
        limit=limit,
        search_params=sparse_search_params,
        output_fields=["version", "book", "chapter", "verse", "text"],
    )
    sparse_results = sparse_results[0]

    # Dense vectors
    dense_results = client.search(
        collection_name=collection_name,
        data=[query_embedding],
        anns_field="dense_embedding",
        limit=limit,
        search_params=dense_search_params,
        output_fields=["version", "book", "chapter", "verse", "text"],
    )
    dense_results = dense_results[0]

    # Perform hybrid search with reciprocal rank fusion
    hybrid_results = client.hybrid_search(
        collection_name=collection_name,
        reqs=[sparse_request, dense_request],
        ranker=WeightedRanker(0.3, 0.7),  # Reciprocal Rank Fusion for combining results
        limit=limit,
        output_fields=["version", "book", "chapter", "verse", "text"]
    )
    hybrid_results = hybrid_results[0]

    # Print results
    print("\n########################")
    print(f"Results for {query}:")
    # Dense results
    print("Dense Search:")
    for i, result in enumerate(dense_results):
        print(
            f"{i+1}. Score: {result['distance']:.4f}, Content: {result['entity']['text']}"
        )
    # Sparse results
    print("\nSparse Search:")
    for i, result in enumerate(sparse_results):
        print(
            f"{i+1}. Score: {result['distance']:.4f}, Content: {result['entity']['text']}"
        )
    # Hybrid results
    print("\nHybrid Search (Combined):")
    for i, result in enumerate(hybrid_results):
        print(
            f"{i+1}. Score: {result['distance']:.4f}, Content: {result['entity']['text']}"
        )